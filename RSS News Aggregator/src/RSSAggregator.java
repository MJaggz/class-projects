import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program is an update from the RSS Reader project. This project is focused on
 * taking an XML input file that has RSS URLS that are 2.0, and makes a nicely
 * formatted HTML page with links for all of the feeds which then lead to other
 * individual feeds.
 *
 * @author Mohamed Jama
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <HTML> <head> <title>the channel tag title as the page title<title>
     * <head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * </table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /// Output the opening tags for HTML file.///
        out.println("<html>");
        out.println("<head>");
        out.println("<meta charset=\"utf-8\">");
        out.println("<title>");

        ///Initialize empty strings to use later on in this method.///
        String descriptionContent;
        String title;
        String link;
        /// Use the getChildElement to help find title.///
        int title1 = getChildElement(channel, "title");
        ///If there are no number of subtrees return "No title available".///
        if (channel.child(title1).numberOfChildren() == 0) {
            title = ("No title available");
        } else { ///If subtree does exist, return the label.///
            title = channel.child(title1).child(0).label();
            out.println(title);
        }
        int link1 = getChildElement(channel, "link");

        if (channel.child(link1).numberOfChildren() == 0) {
            link = ("No link avaliable");
        } else {
            link = channel.child(link1).child(0).label();
            out.println(link);
        }
        ///Output more tags for HTML file.///
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");

        out.println("<p>");
        ///Use the getChildElement to help find a description if it exists.///
        int description1 = getChildElement(channel, "description");
        ///If there are no number of subtrees return "No description available".///
        if (channel.child(description1).numberOfChildren() == 0) {

            descriptionContent = ("No description available");
        } else { ///If subtree does exist, return the label.///
            descriptionContent = channel.child(description1).child(0).label();
            out.println(descriptionContent);
        }
        ///Output the remaining tags with some closing tags.///
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:(Checkstyle did not like the
     * closing html tags without opening tags so I included the opening tag near
     * the closing tag.
     *
     * <table>
     * </table>
     * <body> <html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        ///Outputs the remaining closing tags as a separate method.///
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        ///Initialize variables as 0 and -1 to start loop.///
        int index = 0;
        int j = -1;
        ///While loop to find child elements.///
        while (index < xml.numberOfChildren() && j == -1) {
            if (xml.child(index).isTag()
                    && xml.child(index).label().equals(tag)) {
                j = index;

            }
            index++;
        } ///Return j which could either be -1 or the index.///
        return j;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        ///Open the table row for this method.///
        out.println("<tr>");
        ///Find the date from the RSS feed using getChildElement.///
        String date = ("No date avaliable");
        int dateNumber = getChildElement(item, "pubDate");
        ///Check to see if there is a "pubDate" attribute and if there is
        ///store it.///
        if (dateNumber != -1 && item.child(dateNumber).numberOfChildren() > 0) {
            date = item.child(dateNumber).child(0).label();
            if (item.child(dateNumber).hasAttribute("pubDate")) {
                date = item.child(dateNumber).attributeValue("pubDate");
            }
        } ///If there is a date, output that date.///
        if (date.length() != 0) {
            out.println("<td>" + date + "</td>");
        } else { ///If no date, output "No date available".///
            out.println("<td> No date available </td>");
        }

        ///Find the source from the RSS feed using getChildElement.///
        String sourceTag = ("No source available");
        String sourceLink = ("");
        int sourceNumber = getChildElement(item, "source");
        ///Check to see if there is a "source" attribute and if there is
        ///store it.///
        if (sourceNumber != -1
                && item.child(sourceNumber).numberOfChildren() > 0) {
            sourceTag = item.child(sourceNumber).child(0).label();
            if (item.child(sourceNumber).hasAttribute("url")) {
                sourceLink = item.child(sourceNumber).attributeValue("url");
            }
        }
        ///If there is a source, output that source with the source in hyperlink.///
        if (sourceLink.length() != 0) {
            out.println("<td><a href=\"" + sourceLink + "\">" + sourceTag
                    + "</a></td>");

        } else { ///If no source, output "No source available".///
            out.println("<td>" + sourceTag + "</td>");
        }

        ///Find the title or description from the RSS feed using getChildElement.///
        String titleOrDesciption = ("No title or description available");
        int titleNumber = getChildElement(item, "title");
        int descriptionNumber = getChildElement(item, "description");
        String websiteURL = ("");
        int linkNumber = getChildElement(item, "link");
        ////Check to see if a title exists and not empty or the description
        ///exists and not empty, or if there is no title available.///
        if (linkNumber != -1 && item.child(linkNumber).numberOfChildren() > 0) {
            websiteURL = item.child(linkNumber).child(0).label();
        }
        if (titleNumber != -1
                && item.child(titleNumber).numberOfChildren() > 0) {
            titleOrDesciption = item.child(titleNumber).child(0).label();
        } else if (descriptionNumber != -1
                && item.child(descriptionNumber).numberOfChildren() > 0) {
            titleOrDesciption = item.child(descriptionNumber).child(0).label();
        }

        out.print("<td>");
        ///If there is a URL, hyperlink it and output it.///
        if (websiteURL.length() != 0) {
            out.print("<a href =\"" + websiteURL + "\">" + titleOrDesciption
                    + "</a>");
        } else { ///If there is not a URL, output "No title or description
            ///Available".
            out.print(titleOrDesciption);
        }

        ///Output finishing closing tags for table and row.///
        out.println("</td>");

        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree tree = new XMLTree1(url);
        ///While loop so that if the condition is not met, the else statement
        ///will run leading the user to try again.///
        boolean booleanValidXMLFileIsTrue = false;
        while (!booleanValidXMLFileIsTrue) {
            ///Checks to see the RSS is 2.0, If not, asks the user to try again.///
            if (tree.attributeValue("version").equals("2.0")
                    && tree.hasAttribute("version")
                    && tree.label().equals("rss")) {
                ///Boolean condition has been met so set to true.///
                booleanValidXMLFileIsTrue = true;
                SimpleWriter htmlSite = new SimpleWriter1L(file);

                XMLTree channel = tree.child(0);
                ///Output the opening tags.///
                outputHeader(channel, htmlSite);
                int index = 0;
                while (index < channel.numberOfChildren()) {
                    XMLTree ch = channel.child(index);
                    if (ch.label().equals("item")) {
                        processItem(ch, htmlSite);
                    }
                    index++;
                } ///Output the closing tags.///
                outputFooter(htmlSite);

                htmlSite.close();
            } else {
                ///If RSS feed is not 2.0, outputs the URL that was not 2.0
                ///and asks the user to try again.///
                out.println("This url: " + url
                        + " :is not a valid RSS 2.0 feed, please try again.");
            }
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        ///Boolean condition wrapped around main so that the user is prompted
        ///to enter a valid file name until they do.///
        boolean booleanValidXMLFileIsTrue = false;
        while (!booleanValidXMLFileIsTrue) {
            ///Prompt the user for a valid XML file name that contains URLS
            ///that are RSS 2.0.///
            out.println("Please enter the name of an XML file: ");
            String xmlFile = in.nextLine();
            ///Make a XMLTree from the users file.///
            XMLTree tree = new XMLTree1(xmlFile);
            ///Check to see if the users' file label is feeds and if it has
            ///the attribute title.
            if (tree.hasAttribute("title") && tree.label().equals("feeds")
                    && tree.isTag()) {
                ///Boolean condition has been met so set to true.///
                booleanValidXMLFileIsTrue = true;
                String title = tree.attributeValue("title");
                ///If user's link is valid, ask for an output file name.///
                out.println(
                        "Enter an output file name (adding .html extention): ");
                String outputName = in.nextLine();
                SimpleWriter htmlSite = new SimpleWriter1L(outputName);
                out.println("Please wait while HTML page is being generated.");
                ///Output HTML WebSite HTML header.///
                htmlSite.println("<html>");
                htmlSite.println("<head>");
                htmlSite.println("<title>" + title + "</title");
                htmlSite.println("</head>");
                htmlSite.println("<body>");
                htmlSite.println("<h1>" + title + "</h1>");
                htmlSite.println("<u1>");

                ///While index is less than the number of children in XMLTree,
                ///find the URL,name,and file for each link inside the XML input file.
                int index = 0;
                while (index < tree.numberOfChildren()) {
                    XMLTree feedXML = tree.child(index);
                    if (feedXML.isTag() && feedXML.label().equals("feed")) {
                        ///Store the URL, name, and file.///
                        String url = feedXML.attributeValue("url");
                        String name = feedXML.attributeValue("name");
                        String file = feedXML.attributeValue("file");
                        ///Output file and name of each link of the HTML title page.///
                        htmlSite.println("<li><a href=\"" + file + "\">" + name
                                + "</a></li>");
                        ///Use the processFeed method to output individual
                        ///feed pages for each link.
                        processFeed(url, file, out);
                    }
                    index++;
                }
                ///Output the closing HTML tags for WebSite headers.
                htmlSite.println("</u1>");
                htmlSite.println("</body>");
                htmlSite.println("</html>");
                htmlSite.close();
                ///Else statement in while loop so that if the user enters the wrong
                ///XML file, they will be prompted again until they enter a correct
                ///XML file name.
            } else {
                out.println(
                        "The XML file's root tag is not feeds, please try again");
            }
        }
        in.close();
        out.close();
    }
}
